/// <reference path="../typings/index.d.ts" />
var tiForms;
(function (tiForms) {
    var Encryptor = (function () {
        /**
         * Encryptor constructtor
         * @formPubKey: the form public key (EC P-256), Base64 encoded
         */
        function Encryptor(formPubKey) {
            this.formKey = crypto.subtle.importKey("raw", tiForms.base64toUint8Array(formPubKey), {
                "name": "ECDH",
                "namedCurve": "P-256"
            }, false, ['deriveKey']);
        }
        /**
         * Method encrypts a given string.
         * @returns: Promise fulfilled when encryption is complete
         */
        Encryptor.prototype.encryptString = function (data) {
            // Create a private key
            return crypto.subtle.generateKey({
                "name": "ECDH",
                "namedCurve": "P-256"
            }, false /* make key not extractable */, ["deriveKey"] /* Only need key derivation */)
                .then(function (privKey) {
                return crypto.subtle.deriveKey({
                    "name": "ECDH",
                    "namedCurve": "P-256",
                    "public": this.formKey
                }, privKey, {
                    "name": 'AES-CBC',
                    "length": 256
                }, false, ["encrypt"])
                    .then(function (encryptor) {
                });
            });
        };
        /**
         * Version of encryptString with callbacks as arguments
         * @success is provided with an object of type arguments
         * @fail is provided the error
         */
        Encryptor.prototype.encryptStringCB = function (data, success, fail) {
            this.encryptString(data).then(success, fail);
        };
        return Encryptor;
    }());
    tiForms.Encryptor = Encryptor;
})(tiForms || (tiForms = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvcm1FbmNyeXB0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDhDQUE4QztBQUU5QyxJQUFPLE9BQU8sQ0FzRWI7QUF0RUQsV0FBTyxPQUFPLEVBQUMsQ0FBQztJQVFaO1FBNkNJOzs7V0FHRztRQUNILG1CQUFZLFVBQWtCO1lBQzFCLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQ2xDLEtBQUssRUFBRSxPQUFPLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDLEVBQzdDO2dCQUNJLE1BQU0sRUFBRSxNQUFNO2dCQUNkLFlBQVksRUFBRSxPQUFPO2FBQ1gsRUFDZCxLQUFLLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FDdkIsQ0FBQztRQUVOLENBQUM7UUF4REQ7OztXQUdHO1FBQ0gsaUNBQWEsR0FBYixVQUFjLElBQVk7WUFDdEIsdUJBQXVCO1lBQ3ZCLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FDNUI7Z0JBQ0ksTUFBTSxFQUFFLE1BQU07Z0JBQ2QsWUFBWSxFQUFFLE9BQU87YUFDWCxFQUNkLEtBQUssQ0FBQyw4QkFBOEIsRUFDcEMsQ0FBQyxXQUFXLENBQUMsQ0FBQyw4QkFBOEIsQ0FBQztpQkFDNUMsSUFBSSxDQUFDLFVBQVUsT0FBa0I7Z0JBQzlCLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FDMUI7b0JBQ0ksTUFBTSxFQUFFLE1BQU07b0JBQ2QsWUFBWSxFQUFFLE9BQU87b0JBQ3JCLFFBQVEsRUFBRSxJQUFJLENBQUMsT0FBTztpQkFDWixFQUNkLE9BQU8sRUFDUDtvQkFDSSxNQUFNLEVBQUUsU0FBUztvQkFDakIsUUFBUSxFQUFFLEdBQUc7aUJBQ0gsRUFDZCxLQUFLLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztxQkFDbEIsSUFBSSxDQUFDLFVBQVUsU0FBUztnQkFHekIsQ0FBQyxDQUFDLENBQUM7WUFDWCxDQUFDLENBQUMsQ0FBQTtRQUNWLENBQUM7UUFFRDs7OztXQUlHO1FBQ0gsbUNBQWUsR0FBZixVQUFnQixJQUFZLEVBQUUsT0FBaUIsRUFBRSxJQUFjO1lBQzNELElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNqRCxDQUFDO1FBaUJMLGdCQUFDO0lBQUQsQ0E1REEsQUE0REMsSUFBQTtJQTVEWSxpQkFBUyxZQTREckIsQ0FBQTtBQUVMLENBQUMsRUF0RU0sT0FBTyxLQUFQLE9BQU8sUUFzRWIiLCJmaWxlIjoiZm9ybUVuY3J5cHQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdHlwaW5ncy9pbmRleC5kLnRzXCIgLz5cblxubW9kdWxlIHRpRm9ybXMge1xuXG4gICAgZXhwb3J0IGludGVyZmFjZSBFbmNyeXB0ZWREYXRhIHtcbiAgICAgICAgcHViS2V5OiBzdHJpbmc7IC8vIFRoZSBwdWJsaWMgRUMgUC0yNTYga2V5IGFzIGEgQmFzZTY0XG4gICAgICAgIHBheWxvYWQ6IHN0cmluZzsgLy8gVGhlIGVuY3J5cHRlZCBwYXlsb2FkIGFzIEFFUy0yNTYgQ0JDIHdpdGggSVY9MC4gS2V5IGlzIGRlcml2ZWQgdXNpbiBEaWZmaWUtSGVsbWFuIFxuICAgIH1cblxuXG4gICAgZXhwb3J0IGNsYXNzIEVuY3J5cHRvciB7XG4gICAgICAgIHByaXZhdGUgZm9ybUtleTogQ3J5cHRvS2V5O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNZXRob2QgZW5jcnlwdHMgYSBnaXZlbiBzdHJpbmcuXG4gICAgICAgICAqIEByZXR1cm5zOiBQcm9taXNlIGZ1bGZpbGxlZCB3aGVuIGVuY3J5cHRpb24gaXMgY29tcGxldGVcbiAgICAgICAgICovXG4gICAgICAgIGVuY3J5cHRTdHJpbmcoZGF0YTogc3RyaW5nKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSBwcml2YXRlIGtleVxuICAgICAgICAgICAgcmV0dXJuIGNyeXB0by5zdWJ0bGUuZ2VuZXJhdGVLZXkoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJFQ0RIXCIsXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZWRDdXJ2ZVwiOiBcIlAtMjU2XCJcbiAgICAgICAgICAgICAgICB9IGFzIEFsZ29yaXRobSxcbiAgICAgICAgICAgICAgICBmYWxzZSAvKiBtYWtlIGtleSBub3QgZXh0cmFjdGFibGUgKi8sXG4gICAgICAgICAgICAgICAgW1wiZGVyaXZlS2V5XCJdIC8qIE9ubHkgbmVlZCBrZXkgZGVyaXZhdGlvbiAqLylcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocHJpdktleTogQ3J5cHRvS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcnlwdG8uc3VidGxlLmRlcml2ZUtleShcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJFQ0RIXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lZEN1cnZlXCI6IFwiUC0yNTZcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInB1YmxpY1wiOiB0aGlzLmZvcm1LZXlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gYXMgQWxnb3JpdGhtLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJpdktleSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogJ0FFUy1DQkMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibGVuZ3RoXCI6IDI1NlxuICAgICAgICAgICAgICAgICAgICAgICAgfSBhcyBBbGdvcml0aG0sXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWxzZSwgW1wiZW5jcnlwdFwiXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChlbmNyeXB0b3IpIHtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFZlcnNpb24gb2YgZW5jcnlwdFN0cmluZyB3aXRoIGNhbGxiYWNrcyBhcyBhcmd1bWVudHNcbiAgICAgICAgICogQHN1Y2Nlc3MgaXMgcHJvdmlkZWQgd2l0aCBhbiBvYmplY3Qgb2YgdHlwZSBhcmd1bWVudHNcbiAgICAgICAgICogQGZhaWwgaXMgcHJvdmlkZWQgdGhlIGVycm9yXG4gICAgICAgICAqL1xuICAgICAgICBlbmNyeXB0U3RyaW5nQ0IoZGF0YTogc3RyaW5nLCBzdWNjZXNzOiBGdW5jdGlvbiwgZmFpbDogRnVuY3Rpb24pe1xuICAgICAgICAgICAgdGhpcy5lbmNyeXB0U3RyaW5nKGRhdGEpLnRoZW4oc3VjY2VzcywgZmFpbCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKiogXG4gICAgICAgICAqIEVuY3J5cHRvciBjb25zdHJ1Y3R0b3JcbiAgICAgICAgICogQGZvcm1QdWJLZXk6IHRoZSBmb3JtIHB1YmxpYyBrZXkgKEVDIFAtMjU2KSwgQmFzZTY0IGVuY29kZWRcbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0cnVjdG9yKGZvcm1QdWJLZXk6IHN0cmluZykge1xuICAgICAgICAgICAgdGhpcy5mb3JtS2V5ID0gY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoXG4gICAgICAgICAgICAgICAgXCJyYXdcIiwgdGlGb3Jtcy5iYXNlNjR0b1VpbnQ4QXJyYXkoZm9ybVB1YktleSksIFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRUNESFwiLFxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVkQ3VydmVcIjogXCJQLTI1NlwiXG4gICAgICAgICAgICAgICAgfSBhcyBBbGdvcml0aG0sXG4gICAgICAgICAgICAgICAgZmFsc2UsIFsnZGVyaXZlS2V5J11cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgfVxuICAgIH1cblxufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
